<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\FW_AO2024_Cpu_MeterSystem_Center1261_v01.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\FW_AO2024_Cpu_MeterSystem_Center1261_v01.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6230001: Last Updated: Wed Aug 27 18:08:33 2025
<BR><P>
<H3>Maximum Stack Usage =        280 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; HostProcess &rArr; Host_OTACenterProcess &rArr; MarkFwAsActive &rArr; WRITE_FW_STATUS_FLAG &rArr; WriteFWstatus &rArr; WriteToFlash &rArr; CRC32_Calc &rArr; CRC_Open
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[16]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ACMP01_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1f]">ADC_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[6]">BOD_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[20]">CLKDIRC_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[16]">Default_Handler</a> from startup_nuc1261.o(.text) referenced 5 times from startup_nuc1261.o(RESET)
 <LI><a href="#[8]">EINT024_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[9]">EINT135_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[a]">GPAB_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[b]">GPCDEF_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[17]">I2C0_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1d]">PDMA_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[c]">PWM0_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[d]">PWM1_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1e]">PWRWU_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[24]">ProcessHardFault</a> from retarget.o(.text.ProcessHardFault) referenced from startup_nuc1261.o(.text)
 <LI><a href="#[21]">RTC_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1b]">SC01_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[25]">SH_Return</a> from retarget.o(.text.SH_Return) referenced from startup_nuc1261.o(.text)
 <LI><a href="#[14]">SPI0_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[15]">SPI1_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from main.o(.text.SysTick_Handler) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[e]">TMR0_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[f]">TMR1_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[10]">TMR2_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[11]">TMR3_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[12]">UART02_IRQHandler</a> from main.o(.text.UART02_IRQHandler) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[13]">UART1_IRQHandler</a> from main.o(.text.UART1_IRQHandler) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1a]">USBD_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[19]">USCI_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[7]">WDT_IRQHandler</a> from main.o(.text.WDT_IRQHandler) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[23]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_nuc1261.o(.text)
 <LI><a href="#[26]">fputc</a> from retarget.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[22]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[23]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[29]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[37]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b8]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[b9]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[ba]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[bb]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[bc]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ACMP01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CLKDIRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>EINT024_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EINT135_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>GPAB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPCDEF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SC01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>USCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SH_DoCommand</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_nuc1261.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[28]"></a>__PC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_nuc1261.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[50]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meter_RSP_FWInfo
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_MeterFWInfo
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_CenterFWinfo
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_CenterUpdateSuccsess
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC32_Calc
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bf]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[32]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2a]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[c0]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[c1]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[c2]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c3]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[30]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[39]"></a>AO2022_Center_1261_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ao2022_center_1261.o(.text.AO2022_Center_1261_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AO2022_Center_1261_init
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_Center_1261_init_x32
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_Center_1261_init_uart2
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_Center_1261_init_uart1
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_Center_1261_init_uart0
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_Center_1261_init_pf
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_Center_1261_init_pe
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_Center_1261_init_pd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_Center_1261_init_pc
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_Center_1261_init_pb
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_Center_1261_init_pa
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_Center_1261_init_ice
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>AO2022_Center_1261_init_ice</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ao2022_center_1261.o(.text.AO2022_Center_1261_init_ice))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_Center_1261_init
</UL>

<P><STRONG><a name="[3b]"></a>AO2022_Center_1261_init_pa</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ao2022_center_1261.o(.text.AO2022_Center_1261_init_pa))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_Center_1261_init
</UL>

<P><STRONG><a name="[3c]"></a>AO2022_Center_1261_init_pb</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ao2022_center_1261.o(.text.AO2022_Center_1261_init_pb))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_Center_1261_init
</UL>

<P><STRONG><a name="[3d]"></a>AO2022_Center_1261_init_pc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ao2022_center_1261.o(.text.AO2022_Center_1261_init_pc))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_Center_1261_init
</UL>

<P><STRONG><a name="[3e]"></a>AO2022_Center_1261_init_pd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ao2022_center_1261.o(.text.AO2022_Center_1261_init_pd))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_Center_1261_init
</UL>

<P><STRONG><a name="[3f]"></a>AO2022_Center_1261_init_pe</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ao2022_center_1261.o(.text.AO2022_Center_1261_init_pe))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_Center_1261_init
</UL>

<P><STRONG><a name="[40]"></a>AO2022_Center_1261_init_pf</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ao2022_center_1261.o(.text.AO2022_Center_1261_init_pf))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_Center_1261_init
</UL>

<P><STRONG><a name="[41]"></a>AO2022_Center_1261_init_uart0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ao2022_center_1261.o(.text.AO2022_Center_1261_init_uart0))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_Center_1261_init
</UL>

<P><STRONG><a name="[42]"></a>AO2022_Center_1261_init_uart1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ao2022_center_1261.o(.text.AO2022_Center_1261_init_uart1))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_Center_1261_init
</UL>

<P><STRONG><a name="[43]"></a>AO2022_Center_1261_init_uart2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ao2022_center_1261.o(.text.AO2022_Center_1261_init_uart2))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_Center_1261_init
</UL>

<P><STRONG><a name="[44]"></a>AO2022_Center_1261_init_x32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ao2022_center_1261.o(.text.AO2022_Center_1261_init_x32))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_Center_1261_init
</UL>

<P><STRONG><a name="[92]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, clk.o(.text.CLK_EnableModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[45]"></a>CLK_EnablePLL</STRONG> (Thumb, 476 bytes, Stack size 72 bytes, clk.o(.text.CLK_EnablePLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CLK_EnablePLL &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[90]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, clk.o(.text.CLK_EnableXtalRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLK_EnableXtalRC
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[4b]"></a>CLK_SetCoreClock</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, clk.o(.text.CLK_SetCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[4c]"></a>CLK_SetHCLK</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, clk.o(.text.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[93]"></a>CLK_SetModuleClock</STRONG> (Thumb, 156 bytes, Stack size 44 bytes, clk.o(.text.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[91]"></a>CLK_SetSysTickClockSrc</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, clk.o(.text.CLK_SetSysTickClockSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLK_SetSysTickClockSrc
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[46]"></a>CLK_WaitClockReady</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, clk.o(.text.CLK_WaitClockReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[4e]"></a>CRC32_Calc</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, ota_manager.o(.text.CRC32_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CRC32_Calc &rArr; CRC_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetChecksum
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash
</UL>

<P><STRONG><a name="[51]"></a>CRC_GetChecksum</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, crc.o(.text.CRC_GetChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC_GetChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC32_Calc
</UL>

<P><STRONG><a name="[4f]"></a>CRC_Open</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, crc.o(.text.CRC_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC32_Calc
</UL>

<P><STRONG><a name="[52]"></a>CalChecksumH</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ao_hostprocess.o(.text.CalChecksumH))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CalChecksumH &rArr; _SendStringToHOST &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToHOST
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_MeterFWInfo
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_CenterFWinfo
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_InvData
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_WMData
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_BmsData
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_PowerData
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_Ack
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_SystemInformation
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_FirstReset_Ack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_CenterUpdateSuccsess
</UL>

<P><STRONG><a name="[54]"></a>CalChecksumM</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ao_meterprocess.o(.text.CalChecksumM))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CalChecksumM &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeterBootloader_CmdUpdateAPROM
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeterBootloader_CmdEraseAPROM
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeterBootloader_UpdateMetadata
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeterBootloader_ConnectCmd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeter_MeterOTACmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeter_GetInvData
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeter_GetWMData
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeter_GetBmsData
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeter_GetPowerData
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeter_AliveToken
</UL>

<P><STRONG><a name="[5b]"></a>ClearRespDelayTimer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ao_hostprocess.o(.text.ClearRespDelayTimer))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[af]"></a>DefaultValue</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text.DefaultValue))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>FMC_Close</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text.FMC_Close))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash
</UL>

<P><STRONG><a name="[69]"></a>FMC_Open</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text.FMC_Open))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToBootloader
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRITE_FW_STATUS_FLAG
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_OTAMeterProcess
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_OTACenterProcess
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash
</UL>

<P><STRONG><a name="[97]"></a>FMC_Proc</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, fmc_user.o(.text.FMC_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FMC_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeterBootloader_CmdUpdateAPROM
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeterBootloader_CmdEraseAPROM
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMeterOtaCmdList
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash
</UL>

<P><STRONG><a name="[ac]"></a>GPIO_Mode_Init</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, main.o(.text.GPIO_Mode_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_Mode_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>GetHostRTC</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, ao_hostprocess.o(.text.GetHostRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetHostRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_OTAMeterProcess
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_OTACenterProcess
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_InvDataProcess
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_WMDataProcess
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_BmsDataProcess
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_PowerMeterDataProcess
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_AliveProcess
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[56]"></a>HOST_AliveProcess</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ao_hostprocess.o(.text.HOST_AliveProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HOST_AliveProcess &rArr; GetHostRTC
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHostRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[58]"></a>HostProcess</STRONG> (Thumb, 528 bytes, Stack size 24 bytes, ao_hostprocess.o(.text.HostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HostProcess &rArr; Host_OTACenterProcess &rArr; MarkFwAsActive &rArr; WRITE_FW_STATUS_FLAG &rArr; WriteFWstatus &rArr; WriteToFlash &rArr; CRC32_Calc &rArr; CRC_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_InvData
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_WMData
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_BmsData
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_PowerData
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_Ack
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_SystemInformation
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_OTAMeterProcess
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_OTACenterProcess
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_InvDataProcess
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_WMDataProcess
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_BmsDataProcess
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_PowerMeterDataProcess
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRespDelayTimer
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOST_AliveProcess
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_FirstReset_Ack
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHostRTC
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetHostUART
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>Host_BmsDataProcess</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ao_hostprocess.o(.text.Host_BmsDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Host_BmsDataProcess &rArr; GetHostRTC
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHostRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[5f]"></a>Host_InvDataProcess</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ao_hostprocess.o(.text.Host_InvDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Host_InvDataProcess &rArr; GetHostRTC
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHostRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[60]"></a>Host_OTACenterProcess</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ao_hostprocess.o(.text.Host_OTACenterProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Host_OTACenterProcess &rArr; MarkFwAsActive &rArr; WRITE_FW_STATUS_FLAG &rArr; WriteFWstatus &rArr; WriteToFlash &rArr; CRC32_Calc &rArr; CRC_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToBootloader
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkFwAsActive
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRITE_FW_STATUS_FLAG
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_CenterFWinfo
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHostRTC
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[61]"></a>Host_OTAMeterProcess</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ao_hostprocess.o(.text.Host_OTAMeterProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Host_OTAMeterProcess &rArr; WRITE_FW_STATUS_FLAG &rArr; WriteFWstatus &rArr; WriteToFlash &rArr; CRC32_Calc &rArr; CRC_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMeterOtaCmdList
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToBootloader
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRITE_FW_STATUS_FLAG
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_CenterFWinfo
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHostRTC
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[5c]"></a>Host_PowerMeterDataProcess</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ao_hostprocess.o(.text.Host_PowerMeterDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Host_PowerMeterDataProcess &rArr; GetHostRTC
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHostRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[5e]"></a>Host_WMDataProcess</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ao_hostprocess.o(.text.Host_WMDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Host_WMDataProcess &rArr; GetHostRTC
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHostRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[6d]"></a>JumpToBootloader</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ota_manager.o(.text.JumpToBootloader))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = JumpToBootloader &rArr; WDT_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Open
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SetVectorPageAddr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_OTAMeterProcess
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_OTACenterProcess
</UL>

<P><STRONG><a name="[6c]"></a>MarkFwAsActive</STRONG> (Thumb, 384 bytes, Stack size 56 bytes, ota_manager.o(.text.MarkFwAsActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MarkFwAsActive &rArr; WRITE_FW_STATUS_FLAG &rArr; WriteFWstatus &rArr; WriteToFlash &rArr; CRC32_Calc &rArr; CRC_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRITE_FW_STATUS_FLAG
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMetadata
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_OTACenterProcess
</UL>

<P><STRONG><a name="[74]"></a>MeterBoardPolling</STRONG> (Thumb, 2156 bytes, Stack size 40 bytes, ao_meterprocess.o(.text.MeterBoardPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = MeterBoardPolling &rArr; SendHost_MeterFWInfo &rArr; CalChecksumH &rArr; _SendStringToHOST &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeterBootloader_CmdUpdateAPROM
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeterBootloader_CmdEraseAPROM
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeterBootloader_UpdateMetadata
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeterBootloader_ConnectCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_MeterFWInfo
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeter_MeterOTACmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeter_GetInvData
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeter_GetWMData
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeter_GetBmsData
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeter_GetPowerData
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollingTimeout_Handler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollSuccess_Handler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeter_AliveToken
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMeterUART
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>MeterProcess</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, ao_meterprocess.o(.text.MeterProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MeterProcess &rArr; Meter_RSP_BmsData
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meter_RSP_FWInfo
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meter_RSP_InvData
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meter_RSP_WMData
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meter_RSP_BmsData
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meter_RSP_PowerData
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meter_RSP_SysInformation
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meter_AckProcess
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMeterUART
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>Meter_AckProcess</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ao_meterprocess.o(.text.Meter_AckProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Meter_AckProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterProcess
</UL>

<P><STRONG><a name="[87]"></a>Meter_RSP_BmsData</STRONG> (Thumb, 632 bytes, Stack size 60 bytes, ao_meterprocess.o(.text.Meter_RSP_BmsData))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Meter_RSP_BmsData
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterProcess
</UL>

<P><STRONG><a name="[8a]"></a>Meter_RSP_FWInfo</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ota_manager.o(.text.Meter_RSP_FWInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Meter_RSP_FWInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterProcess
</UL>

<P><STRONG><a name="[89]"></a>Meter_RSP_InvData</STRONG> (Thumb, 716 bytes, Stack size 28 bytes, ao_meterprocess.o(.text.Meter_RSP_InvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Meter_RSP_InvData
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterProcess
</UL>

<P><STRONG><a name="[86]"></a>Meter_RSP_PowerData</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ao_meterprocess.o(.text.Meter_RSP_PowerData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Meter_RSP_PowerData
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterProcess
</UL>

<P><STRONG><a name="[85]"></a>Meter_RSP_SysInformation</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ao_meterprocess.o(.text.Meter_RSP_SysInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Meter_RSP_SysInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterProcess
</UL>

<P><STRONG><a name="[88]"></a>Meter_RSP_WMData</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ao_meterprocess.o(.text.Meter_RSP_WMData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Meter_RSP_WMData
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterProcess
</UL>

<P><STRONG><a name="[77]"></a>PollSuccess_Handler</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, ao_meterprocess.o(.text.PollSuccess_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PollSuccess_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterBoardPolling
</UL>

<P><STRONG><a name="[78]"></a>PollingTimeout_Handler</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, ao_meterprocess.o(.text.PollingTimeout_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PollingTimeout_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterBoardPolling
</UL>

<P><STRONG><a name="[24]"></a>ProcessHardFault</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, retarget.o(.text.ProcessHardFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ProcessHardFault &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>ReadMeterOtaCmdList</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ao_hostprocess.o(.text.ReadMeterOtaCmdList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ReadMeterOtaCmdList &rArr; FMC_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>ReadMyCenterID</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, main.o(.text.ReadMyCenterID))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>RecoverSystemMoniter</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, main.o(.text.RecoverSystemMoniter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RecoverSystemMoniter
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMeterUART
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetHostUART
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[59]"></a>ResetHostUART</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(.text.ResetHostUART))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverSystemMoniter
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[75]"></a>ResetMeterUART</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(.text.ResetMeterUART))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterBoardPolling
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterProcess
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverSystemMoniter
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[25]"></a>SH_Return</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, retarget.o(.text.SH_Return))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SH_Return
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>SYS_Init</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, main.o(.text.SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SYS_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysTickClockSrc
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>SYS_ResetModule</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, sys.o(.text.SYS_ResetModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SYS_ResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[94]"></a>SendChar</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, retarget.o(.text.SendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SendChar &rArr; SendChar_ToUART
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[95]"></a>SendChar_ToUART</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, retarget.o(.text.SendChar_ToUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[63]"></a>SendHost_Ack</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ao_hostprocess.o(.text.SendHost_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SendHost_Ack &rArr; CalChecksumH &rArr; _SendStringToHOST &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[65]"></a>SendHost_BmsData</STRONG> (Thumb, 688 bytes, Stack size 80 bytes, ao_hostprocess.o(.text.SendHost_BmsData))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SendHost_BmsData &rArr; CalChecksumH &rArr; _SendStringToHOST &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[6a]"></a>SendHost_CenterFWinfo</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ota_manager.o(.text.SendHost_CenterFWinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SendHost_CenterFWinfo &rArr; CalChecksumH &rArr; _SendStringToHOST &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_OTAMeterProcess
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_OTACenterProcess
</UL>

<P><STRONG><a name="[96]"></a>SendHost_CenterUpdateSuccsess</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ota_manager.o(.text.SendHost_CenterUpdateSuccsess))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SendHost_CenterUpdateSuccsess &rArr; CalChecksumH &rArr; _SendStringToHOST &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>SendHost_FirstReset_Ack</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ao_hostprocess.o(.text.SendHost_FirstReset_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SendHost_FirstReset_Ack &rArr; CalChecksumH &rArr; _SendStringToHOST &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[67]"></a>SendHost_InvData</STRONG> (Thumb, 748 bytes, Stack size 40 bytes, ao_hostprocess.o(.text.SendHost_InvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SendHost_InvData &rArr; CalChecksumH &rArr; _SendStringToHOST &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[7e]"></a>SendHost_MeterFWInfo</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ota_manager.o(.text.SendHost_MeterFWInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SendHost_MeterFWInfo &rArr; CalChecksumH &rArr; _SendStringToHOST &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterBoardPolling
</UL>

<P><STRONG><a name="[64]"></a>SendHost_PowerData</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ao_hostprocess.o(.text.SendHost_PowerData))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SendHost_PowerData &rArr; CalChecksumH &rArr; _SendStringToHOST &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[62]"></a>SendHost_SystemInformation</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ao_hostprocess.o(.text.SendHost_SystemInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SendHost_SystemInformation &rArr; CalChecksumH &rArr; _SendStringToHOST &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[66]"></a>SendHost_WMData</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ao_hostprocess.o(.text.SendHost_WMData))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SendHost_WMData &rArr; CalChecksumH &rArr; _SendStringToHOST &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
</UL>

<P><STRONG><a name="[81]"></a>SendMeterBootloader_CmdEraseAPROM</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ao_meterprocess.o(.text.SendMeterBootloader_CmdEraseAPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SendMeterBootloader_CmdEraseAPROM &rArr; CalChecksumM &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumM
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterBoardPolling
</UL>

<P><STRONG><a name="[82]"></a>SendMeterBootloader_CmdUpdateAPROM</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ao_meterprocess.o(.text.SendMeterBootloader_CmdUpdateAPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SendMeterBootloader_CmdUpdateAPROM &rArr; CalChecksumM &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumM
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterBoardPolling
</UL>

<P><STRONG><a name="[7f]"></a>SendMeterBootloader_ConnectCmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ao_meterprocess.o(.text.SendMeterBootloader_ConnectCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SendMeterBootloader_ConnectCmd &rArr; CalChecksumM &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumM
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeterRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterBoardPolling
</UL>

<P><STRONG><a name="[80]"></a>SendMeterBootloader_UpdateMetadata</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ao_meterprocess.o(.text.SendMeterBootloader_UpdateMetadata))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SendMeterBootloader_UpdateMetadata &rArr; CalChecksumM &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumM
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterBoardPolling
</UL>

<P><STRONG><a name="[98]"></a>SendMeterRTC</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, ao_meterprocess.o(.text.SendMeterRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SendMeterRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeterBootloader_ConnectCmd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeter_MeterOTACmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeter_GetInvData
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeter_GetWMData
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeter_GetBmsData
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeter_GetPowerData
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeter_AliveToken
</UL>

<P><STRONG><a name="[76]"></a>SendMeter_AliveToken</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ao_meterprocess.o(.text.SendMeter_AliveToken))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SendMeter_AliveToken &rArr; CalChecksumM &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumM
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeterRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterBoardPolling
</UL>

<P><STRONG><a name="[7a]"></a>SendMeter_GetBmsData</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ao_meterprocess.o(.text.SendMeter_GetBmsData))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SendMeter_GetBmsData &rArr; CalChecksumM &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumM
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeterRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterBoardPolling
</UL>

<P><STRONG><a name="[7c]"></a>SendMeter_GetInvData</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ao_meterprocess.o(.text.SendMeter_GetInvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SendMeter_GetInvData &rArr; CalChecksumM &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumM
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeterRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterBoardPolling
</UL>

<P><STRONG><a name="[79]"></a>SendMeter_GetPowerData</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ao_meterprocess.o(.text.SendMeter_GetPowerData))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SendMeter_GetPowerData &rArr; CalChecksumM &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumM
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeterRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterBoardPolling
</UL>

<P><STRONG><a name="[7b]"></a>SendMeter_GetWMData</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ao_meterprocess.o(.text.SendMeter_GetWMData))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SendMeter_GetWMData &rArr; CalChecksumM &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumM
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeterRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterBoardPolling
</UL>

<P><STRONG><a name="[7d]"></a>SendMeter_MeterOTACmd</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ao_meterprocess.o(.text.SendMeter_MeterOTACmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SendMeter_MeterOTACmd &rArr; CalChecksumM &rArr; _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumM
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeterRTC
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterBoardPolling
</UL>

<P><STRONG><a name="[ae]"></a>SoftI2cMasterInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ao_ee24c.o(.text.SoftI2cMasterInit))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 328 bytes, Stack size 8 bytes, main.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Handler &rArr; RecoverSystemMoniter
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMeterUART
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetHostUART
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverSystemMoniter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, system_nuc1261.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
</UL>

<P><STRONG><a name="[12]"></a>UART02_IRQHandler</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, main.o(.text.UART02_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART02_IRQHandler &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>UART0_Init</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, main.o(.text.UART0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART0_Init &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13]"></a>UART1_IRQHandler</STRONG> (Thumb, 384 bytes, Stack size 32 bytes, main.o(.text.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART1_IRQHandler &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>UART1_Init</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, main.o(.text.UART1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UART1_Init &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>UART_DisableInt</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, uart.o(.text.UART_DisableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_DisableInt &rArr; NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART02_IRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>UART_EnableInt</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, uart.o(.text.UART_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToMETER
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStringToHOST
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART02_IRQHandler
</UL>

<P><STRONG><a name="[7]"></a>WDT_IRQHandler</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, main.o(.text.WDT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = WDT_IRQHandler &rArr; WriteMetadata &rArr; WriteToFlash &rArr; CRC32_Calc &rArr; CRC_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Open
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMetadata
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>WDT_Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(.text.WDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WDT_Init &rArr; WDT_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Open
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>WDT_Open</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wdt.o(.text.WDT_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WDT_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToBootloader
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
</UL>

<P><STRONG><a name="[6b]"></a>WRITE_FW_STATUS_FLAG</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ota_manager.o(.text.WRITE_FW_STATUS_FLAG))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WRITE_FW_STATUS_FLAG &rArr; WriteFWstatus &rArr; WriteToFlash &rArr; CRC32_Calc &rArr; CRC_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFWstatus
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkFwAsActive
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_OTAMeterProcess
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_OTACenterProcess
</UL>

<P><STRONG><a name="[a7]"></a>WriteFWstatus</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ota_manager.o(.text.WriteFWstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = WriteFWstatus &rArr; WriteToFlash &rArr; CRC32_Calc &rArr; CRC_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRITE_FW_STATUS_FLAG
</UL>

<P><STRONG><a name="[73]"></a>WriteMetadata</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ota_manager.o(.text.WriteMetadata))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = WriteMetadata &rArr; WriteToFlash &rArr; CRC32_Calc &rArr; CRC_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkFwAsActive
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
</UL>

<P><STRONG><a name="[6e]"></a>WriteMeterOtaCmdList</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, ao_hostprocess.o(.text.WriteMeterOtaCmdList))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WriteMeterOtaCmdList &rArr; FMC_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Proc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_OTAMeterProcess
</UL>

<P><STRONG><a name="[a8]"></a>WriteToFlash</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, ota_manager.o(.text.WriteToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WriteToFlash &rArr; CRC32_Calc &rArr; CRC_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Proc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC32_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMetadata
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFWstatus
</UL>

<P><STRONG><a name="[53]"></a>_SendStringToHOST</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, ao_hostprocess.o(.text._SendStringToHOST))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _SendStringToHOST &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumH
</UL>

<P><STRONG><a name="[55]"></a>_SendStringToMETER</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ao_meterprocess.o(.text._SendStringToMETER))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _SendStringToMETER &rArr; UART_EnableInt &rArr; NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalChecksumM
</UL>

<P><STRONG><a name="[26]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, retarget.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fputc &rArr; SendChar &rArr; SendChar_ToUART
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[22]"></a>main</STRONG> (Thumb, 360 bytes, Stack size 56 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = main &rArr; HostProcess &rArr; Host_OTACenterProcess &rArr; MarkFwAsActive &rArr; WRITE_FW_STATUS_FLAG &rArr; WriteFWstatus &rArr; WriteToFlash &rArr; CRC32_Calc &rArr; CRC_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterBoardPolling
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterProcess
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostProcess
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMeterOtaCmdList
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHost_CenterUpdateSuccsess
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftI2cMasterInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMyCenterID
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AO2022_Center_1261_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultValue
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Mode_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverSystemMoniter
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[b0]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c4]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[c5]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[c6]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[8b]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHardFault
</UL>

<P><STRONG><a name="[38]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[c7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[c8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[c9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[49]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, system_nuc1261.o(.text.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[16]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>SYS_UnlockReg</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, main.o(.text.SYS_UnlockReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
</UL>

<P><STRONG><a name="[a3]"></a>SYS_LockReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text.SYS_LockReg))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
</UL>

<P><STRONG><a name="[4a]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, main.o(.text.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[a5]"></a>WDT_EnableInt</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, main.o(.text.WDT_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WDT_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>

<P><STRONG><a name="[a6]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(.text.NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>

<P><STRONG><a name="[99]"></a>SysTick_Config</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, main.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, main.o(.text.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[68]"></a>SYS_UnlockReg</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, ao_hostprocess.o(.text.SYS_UnlockReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMeterOtaCmdList
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_OTAMeterProcess
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_OTACenterProcess
</UL>

<P><STRONG><a name="[8d]"></a>FMC_Read</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, ao_hostprocess.o(.text.FMC_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMeterOtaCmdList
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMeterOtaCmdList
</UL>

<P><STRONG><a name="[a9]"></a>FMC_Erase</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, ao_hostprocess.o(.text.FMC_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMeterOtaCmdList
</UL>

<P><STRONG><a name="[aa]"></a>SYS_LockReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ao_hostprocess.o(.text.SYS_LockReg))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMeterOtaCmdList
</UL>

<P><STRONG><a name="[70]"></a>SYS_UnlockReg</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, ota_manager.o(.text.SYS_UnlockReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToBootloader
</UL>

<P><STRONG><a name="[71]"></a>FMC_SetVectorPageAddr</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, ota_manager.o(.text.FMC_SetVectorPageAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_SetVectorPageAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToBootloader
</UL>

<P><STRONG><a name="[72]"></a>NVIC_SystemReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ota_manager.o(.text.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToBootloader
</UL>

<P><STRONG><a name="[48]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, clk.o(.text.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[a0]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, uart.o(.text.NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableInt
</UL>

<P><STRONG><a name="[a1]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, uart.o(.text.NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
</UL>

<P><STRONG><a name="[b2]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b1]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[b5]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b4]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
